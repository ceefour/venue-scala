<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <groupId>com.hendyirawan</groupId>
   <artifactId>venue-scala</artifactId>
   <packaging>war</packaging>
   <name>venue-scala</name>
   <version>1.0.0-SNAPSHOT</version>

   <properties>
      <!--
         Explicitly declaring the source encoding eliminates the following message:
         [WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
      -->
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <!--
         To set the jboss.home environment variable the Maven way, set the jboss.home property in an active profile in
         the Maven 2 settings.xml file
      -->
      <jboss.home>${env.JBOSS_HOME}</jboss.home>
      <jboss.domain>default</jboss.domain>
      <!-- The version of Weld extensions in use -->
      <seam.version>3.0.0.Final</seam.version>
	    <scala.version>2.8.1</scala.version>
   </properties>

	<repositories>
		<!-- Several key Java EE APIs and RIs (like com.sun.faces:jsf-api) are 
			missing from the Maven Central Repository -->
		<!-- The goal is to eventually eliminate the reliance on the JBoss repository -->
		<repository>
			<id>repository.jboss.org-releases</id>
			<name>JBoss Releases Repository</name>
			<url>https://repository.jboss.org/nexus/content/repositories/releases</url>
		</repository>
		<repository>
			<id>java.net-m2</id>
			<name>java.net Maven 2 Repository</name>
			<url>http://download.java.net/maven/2</url>
		</repository>
		<repository>
			<id>scala-tools.org</id>
			<name>Scala-Tools Maven2 Repository</name>
			<url>http://scala-tools.org/repo-releases</url>
		</repository>
		<repository>
			<id>prime-repo</id>
			<name>Prime Technology Maven Repository</name>
			<url>http://repository.prime.com.tr</url>
		</repository>
	</repositories>

   <dependencyManagement>
      <dependencies>
         <!-- Import scope will provide versions for dependencies below. -->
         <dependency>
            <groupId>org.jboss.seam</groupId>
            <artifactId>seam-bom</artifactId>
            <version>${seam.version}</version>
            <type>pom</type>
            <scope>import</scope>
         </dependency>
      </dependencies>
   </dependencyManagement>
   <dependencies>
      <!-- CDI (JSR-299) -->
      <dependency>
         <groupId>javax.enterprise</groupId>
         <artifactId>cdi-api</artifactId>
         <scope>provided</scope>
      </dependency>
      <!-- EJB -->
      <dependency>
         <groupId>org.jboss.ejb3</groupId>
         <artifactId>jboss-ejb3-api</artifactId>
         <scope>provided</scope>
         <version>3.1.0</version>
      </dependency>
      <!-- Common annotations (e.g., @PostConstruct, @PreDestroy, @Generated, @Resource) -->
      <dependency>
         <groupId>javax.annotation</groupId>
         <artifactId>jsr250-api</artifactId>
         <version>1.0</version>
         <scope>provided</scope>
      </dependency>
      <!-- Bean Validation (JSR-303) -->
      <dependency>
         <groupId>javax.validation</groupId>
         <artifactId>validation-api</artifactId>
         <scope>provided</scope>
      </dependency>
      <!-- Bean Validation Implementation -->
      <!-- Provides portable constraints such as @NotEmpty, @Email and @Url -->
      <!-- Hibernate Validator is only the JSR-303 implementation at the moment, so we can assume it's provided -->
      <dependency>
         <groupId>org.hibernate</groupId>
         <artifactId>hibernate-validator</artifactId>
         <version>4.1.0.Final</version>
         <scope>provided</scope>
      </dependency>
      <!-- JSF -->
      <dependency>
        <groupId>com.sun.faces</groupId>
        <artifactId>jsf-api</artifactId>
        <version>2.0.5-b02</version>
        <scope>provided</scope>
      </dependency>
      <!-- JPA -->
      <dependency>
         <groupId>org.hibernate.javax.persistence</groupId>
         <artifactId>hibernate-jpa-2.0-api</artifactId>
         <version>1.0.0.Final</version>
         <scope>provided</scope>
      </dependency>

	<dependency>
	   <groupId>org.jboss.seam.persistence</groupId>
	   <artifactId>seam-persistence-api</artifactId>
	</dependency>
	<dependency>
	   <groupId>org.jboss.seam.persistence</groupId>
	   <artifactId>seam-persistence-impl</artifactId>
	   <scope>runtime</scope>
	</dependency>

      <!-- Optional, but highly recommended. -->
      <dependency>
         <groupId>org.testng</groupId>
         <artifactId>testng</artifactId>
         <version>6.0.1</version>
         <scope>test</scope>
      </dependency>

	  <!-- Needed to compile otherwise Scala compiler will complain -->
      <dependency>
         <groupId>org.glassfish.web</groupId>
         <artifactId>el-impl</artifactId>
         <version>2.1.2-b05</version>
         <scope>provided</scope>
      </dependency>

      <!-- Needed on JBoss AS as EL is out of date?? -->
      <!--<dependency>
         <groupId>org.glassfish.web</groupId>
         <artifactId>el-impl</artifactId>
         <scope>runtime</scope>-->
         <!-- FIXME this version should be in the Weld API BOM -->
<!--          <version>2.1.2-b05</version> -->
         <!--<exclusions>
            <exclusion>
               <groupId>javax.el</groupId>
               <artifactId>el-api</artifactId>
            </exclusion>
         </exclusions>
     </dependency>-->

        <!-- Logging with SLF4J to app server's JUL -->
        <dependency>
            <groupId>org.slf4j</groupId> 
            <artifactId>slf4j-api</artifactId> 
            <version>1.6.1</version> 
        </dependency> 
        <dependency>
            <groupId>org.slf4j</groupId> 
            <artifactId>slf4j-jdk14</artifactId> 
            <version>1.6.1</version> 
            <scope>runtime</scope>
        </dependency>

    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
    </dependency>

    <!-- Test -->
<!--     <dependency> -->
<!--       <groupId>junit</groupId> -->
<!--       <artifactId>junit</artifactId> -->
<!--       <version>4.8.1</version> -->
<!--       <scope>test</scope> -->
<!--     </dependency> -->
    <dependency>
      <groupId>org.scala-tools.testing</groupId>
      <artifactId>specs_${scala.version}</artifactId>
      <version>1.6.7.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest</artifactId>
      <version>1.3</version>
      <scope>test</scope>
    </dependency>

	<dependency>
		<groupId>org.primefaces</groupId>
		<artifactId>primefaces</artifactId>
		<version>2.2.1</version>
	</dependency> 

</dependencies>
   <build>
      <finalName>${artifactId}</finalName>
    <sourceDirectory>src/main/scala</sourceDirectory>
    <testSourceDirectory>src/test/scala</testSourceDirectory>
      <plugins>
         <!-- Compiler plugin enforces Java 1.6 compatiblity -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
               <source>1.6</source>
               <target>1.6</target>
            </configuration>
         </plugin>

         <!-- Eclipse plugin can force download of source and JavaDoc jars -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-eclipse-plugin</artifactId>
            <configuration>
               <wtpversion>2.0</wtpversion>
               <!--
               <downloadSources>true</downloadSources>
               <downloadJavadocs>true</downloadJavadocs>
               -->
            </configuration>
         </plugin>

         <!-- Configure the JBoss AS Maven deploy plugin -->
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>jboss-maven-plugin</artifactId>
            <configuration>
               <jbossHome>${jboss.home}</jbossHome>
               <serverName>${jboss.domain}</serverName>
               <fileNames>
                  <fileName>${project.build.directory}/${build.finalName}.war</fileName>
               </fileNames> 
            </configuration>
         </plugin>
         
      <plugin>
        <groupId>org.scala-tools</groupId>
        <artifactId>maven-scala-plugin</artifactId>
        <version>2.15.2</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
            <configuration>
              <args>
                <arg>-make:transitive</arg>
                <arg>-dependencyfile</arg>
                <arg>${project.build.directory}/.scala_dependencies</arg>
              </args>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
<!--         <version>2.6</version> -->
        <configuration>
          <useFile>false</useFile>
          <disableXmlReport>true</disableXmlReport>
          <!-- If you have classpath issue like NoDefClassError,... -->
          <!-- useManifestOnlyJar>false</useManifestOnlyJar -->
          <includes>
            <include>**/*Test.*</include>
            <include>**/*Suite.*</include>
          </includes>
        </configuration>
      </plugin>
         
      </plugins>
   </build>
</project>
